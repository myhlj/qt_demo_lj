// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MESSAGELBTD_LBTDMESSAGE_H_
#define FLATBUFFERS_GENERATED_MESSAGELBTD_LBTDMESSAGE_H_

#include "flatbuffers/flatbuffers.h"

namespace LBTDMessage {

struct MessageLBTD;

enum MessType {
  MessType_OPENGATE = 1,
  MessType_SETGATE = 2,
  MessType_CLOSETEMINAL = 3,
  MessType_RESTART = 4,
  MessType_VERIFYMODE = 5,
  MessType_ADDEXPOSE = 6,
  MessType_MINUSEXPOSE = 7,
  MessType_EXIT = 8,
  MessType_MIN = MessType_OPENGATE,
  MessType_MAX = MessType_EXIT
};

inline const char **EnumNamesMessType() {
  static const char *names[] = { "OPENGATE", "SETGATE", "CLOSETEMINAL", "RESTART", "VERIFYMODE", "ADDEXPOSE", "MINUSEXPOSE", "EXIT", nullptr };
  return names;
}

inline const char *EnumNameMessType(MessType e) { return EnumNamesMessType()[static_cast<int>(e) - static_cast<int>(MessType_OPENGATE)]; }

struct MessageLBTD FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MESSAGETYPE = 4,
    VT_CHANNELIP = 6,
    VT_PARAM = 8
  };
  MessType messageType() const { return static_cast<MessType>(GetField<int32_t>(VT_MESSAGETYPE, 1)); }
  bool mutate_messageType(MessType _messageType) { return SetField(VT_MESSAGETYPE, static_cast<int32_t>(_messageType)); }
  const flatbuffers::String *channelIp() const { return GetPointer<const flatbuffers::String *>(VT_CHANNELIP); }
  flatbuffers::String *mutable_channelIp() { return GetPointer<flatbuffers::String *>(VT_CHANNELIP); }
  int32_t param() const { return GetField<int32_t>(VT_PARAM, 0); }
  bool mutate_param(int32_t _param) { return SetField(VT_PARAM, _param); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MESSAGETYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHANNELIP) &&
           verifier.Verify(channelIp()) &&
           VerifyField<int32_t>(verifier, VT_PARAM) &&
           verifier.EndTable();
  }
};

struct MessageLBTDBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_messageType(MessType messageType) { fbb_.AddElement<int32_t>(MessageLBTD::VT_MESSAGETYPE, static_cast<int32_t>(messageType), 1); }
  void add_channelIp(flatbuffers::Offset<flatbuffers::String> channelIp) { fbb_.AddOffset(MessageLBTD::VT_CHANNELIP, channelIp); }
  void add_param(int32_t param) { fbb_.AddElement<int32_t>(MessageLBTD::VT_PARAM, param, 0); }
  MessageLBTDBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MessageLBTDBuilder &operator=(const MessageLBTDBuilder &);
  flatbuffers::Offset<MessageLBTD> Finish() {
    auto o = flatbuffers::Offset<MessageLBTD>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MessageLBTD> CreateMessageLBTD(flatbuffers::FlatBufferBuilder &_fbb,
    MessType messageType = MessType_OPENGATE,
    flatbuffers::Offset<flatbuffers::String> channelIp = 0,
    int32_t param = 0) {
  MessageLBTDBuilder builder_(_fbb);
  builder_.add_param(param);
  builder_.add_channelIp(channelIp);
  builder_.add_messageType(messageType);
  return builder_.Finish();
}

inline flatbuffers::Offset<MessageLBTD> CreateMessageLBTDDirect(flatbuffers::FlatBufferBuilder &_fbb,
    MessType messageType = MessType_OPENGATE,
    const char *channelIp = nullptr,
    int32_t param = 0) {
  return CreateMessageLBTD(_fbb, messageType, channelIp ? _fbb.CreateString(channelIp) : 0, param);
}

inline const LBTDMessage::MessageLBTD *GetMessageLBTD(const void *buf) { return flatbuffers::GetRoot<LBTDMessage::MessageLBTD>(buf); }

inline MessageLBTD *GetMutableMessageLBTD(void *buf) { return flatbuffers::GetMutableRoot<MessageLBTD>(buf); }

inline bool VerifyMessageLBTDBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<LBTDMessage::MessageLBTD>(nullptr); }

inline void FinishMessageLBTDBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<LBTDMessage::MessageLBTD> root) { fbb.Finish(root); }

}  // namespace LBTDMessage

#endif  // FLATBUFFERS_GENERATED_MESSAGELBTD_LBTDMESSAGE_H_
